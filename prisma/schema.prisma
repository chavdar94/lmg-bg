generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String    @id @default(uuid())
    email    String    @unique
    password String
    isAdmin  Boolean   @default(false)
    session  Session[]
}

model Session {
    id        String   @id @default(uuid())
    userId    String
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Products {
    id                String    @id @default(uuid())
    name              String?
    product_status    String?
    haspromo          Int?
    price             Float?    @db.Real
    price_with_vat    Float?    @db.Real
    price_without_vat Float?    @db.Real
    currency          String?
    main_picture_url  String?
    manufacturer      String?
    category          String?
    subcategory       String?
    partnum           String?
    vendor_url        String?
    properties        Json?     @db.Json
    created_at        DateTime? @default(now()) @db.Timestamp(6)
    slug              String
    gallery_urls      Json?     @db.Json
    on_focus          Boolean   @default(false)
}

model Category {
    id          String @id @default(uuid())
    title       String
    description String
    slug        String @unique
    price       Int

    @@map("categories")
}

model ServiceCategory {
    id      String    @id @default(uuid())
    title   String
    Service Service[]

    @@map("service_categories")
}

model Service {
    id         String          @id @default(uuid())
    title      String
    price      Float
    categoryId String
    isDeleted  Boolean         @default(false)
    category   ServiceCategory @relation(fields: [categoryId], references: [id])

    @@map("services")
}

model Post {
    id        String   @id @default(uuid())
    title     String
    content   String
    mainImage Bytes
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    author    String?
    Image     Image[]
}

model Image {
    id      String @id @default(uuid())
    content Bytes
    postId  String
    post    Post   @relation(fields: [postId], references: [id])
}

model UsedProduct {
    id               String   @id @default(uuid())
    name             String?
    product_status   String?
    price_with_vat   Float?
    main_picture_url String?
    manufacturer     String?
    category         String?
    subcategory      String?
    vendor_url       String?
    properties       String?
    created_at       DateTime @default(now())
    slug             String
    gallery_urls     Json     @db.Json
    on_focus         Boolean  @default(false)
}
